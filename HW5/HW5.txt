1. Create a variable via a ternary operator that assigns a string based on an expression.

let age = 25;
let eligibility = age >= 18 ? "Eligible to drink" : "Not eligible to drink";
console.log(eligibility);


2. Create an object and loop through its properties, console logging each properties’ value

const person = {
    name: "Antonio Cipriano",
    age: 21,
    occupation: "Aspiring Software Developer"
};

for (const property in person) {
    console.log(`${property}: ${person[property]}`);
}


3. Create an array of numbers. Using the map function, create a second array of those
numbers squared.

const numbers = [1, 2, 3, 4, 5];

const squaredNumbers = numbers.map(number => number * number);

console.log(squaredNumbers);


4. What is the DOM? What is meant by the DOM tree?

DOM is an interface for web documents. It represents the page so that programs can change the document structure, style, and content. DOM represents the document as nodes and objects so that languages like JavaScript can interact with the page. DOM is basically a tree-like structure of the content of a webpage. This structure includes everything from the HTML document, such as elements (like paragraphs, headings, links), attributes (such as class names, IDs), and text content. The "DOM tree" is a term used to describe this tree-like structure. It consists of four main types of nodes which is the document Node, element Nodes (tags like <div>, <p>, <a>) in the document, attribute Nodes: (like class, id, href), and text Nodes.


5. What is a XSS attack? How do they work? How can you guard against them?

Cross-Site Scripting Attacks or XSS is a type of security vulnerability typically found in web applications. It enables attackers to inject malicious scripts into content that other users see and interact with. These attacks exploit the trust a user has for a particular site, allowing the attacker to send malicious code to an unsuspecting user through the website. XSS occurs when an attacker places malicious code into a site. Websites often feature content created by many different people. For example:
• Users can create profiles or add comments
• Multiple authors may contribute articles
• Data can come from third-party sites such as
Facebook, Twitter, news tickers, and other feeds
• Files such as images and video may be uploaded

In order to guard against this you must validate input going into the server. First is only let visitors input the kind of characters they need to when supplying information. This is known as validation. Do not allow untrusted users to submit HTML markup or JavaScript. Double-check validation on the server before displaying user content/storing it in a database. This is important because users could bypass validation in the browser by turning JavaScript off. You must make sure that you are only inserting content generated by users into certain parts of the template files. Lastly, do not create DOM fragments containing HTML from untrusted sources. It should only be added as text once it has been escaped.


